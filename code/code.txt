import speech_recognition as sr
import pyttsx3
import smtplib
import threading
import datetime
import cv2
import re
import imutils
import numpy as np
import time
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.clock import Clock
from imutils.video import FPS
from imutils.video import VideoStream


class VoiceReminder:
    def _init_(self, message):
        self.message = message
        self.engine = pyttsx3.init()

    def trigger_reminder(self):
        reminder_thread = threading.Thread(target=self._repeat_sound)
        reminder_thread.start()

    def _repeat_sound(self):
        start_time = datetime.datetime.now()
        end_time = start_time + datetime.timedelta(minutes=2)
        while datetime.datetime.now() < end_time:
            self.engine.say(self.message)
            self.engine.runAndWait()
        # After 2 minutes, stop saying the message
        self.engine.stop()


class VoiceEmailApp(App):
    def _init_(self, **kwargs):
        super()._init_(**kwargs)
        self.recognizer = sr.Recognizer()
        self.engine = pyttsx3.init()
        self.unm = "prettypraveenjpk@gmail.com"
        self.pwd = "vszk jbbw pqse szir"

        self.layout = BoxLayout(orientation='vertical')

        self.reminder_button = Button(text='Reminder', on_press=self.start_reminder)
        self.object_detect_button = Button(text='Object Detection', on_press=self.start_object_detection)
        self.email_button = Button(text='Voice mail', on_press=self.perform_action)
        self.label = Label(text='')

        self.layout.add_widget(self.reminder_button)
        self.layout.add_widget(self.object_detect_button)
        self.layout.add_widget(self.email_button)
        self.layout.add_widget(self.label)

        # Object detection attributes
        self.reminder_thread = None
        self.vs = None
        self.fps = None
        self.CLASSES = ["background", "aeroplane", "bicycle", "bird", "boat",
                        "bottle", "bus", "car", "cat", "chair", "cow", "diningtable",
                        "dog", "horse", "motorbike", "person", "pottedplant", "sheep",
                        "sofa", "train", "table"]
        self.COLORS = np.random.uniform(0, 255, size=(len(self.CLASSES), 3))
        self.net = None

    def build(self):
        return self.layout

    def perform_action(self, instance):
        self.speak("What do you want to do? Speak SEND to Send mail, Speak READ to Read Inbox, Speak EXIT to Exit")

        choice = self.listen().lower()

        if choice == 'send':
            self.send_email()
        elif choice == 'read':
            self.read_email()
        elif choice == 'exit':
            self.stop()
        else:
            self.speak("Invalid choice. Please try again.")
            self.perform_action()

    def speak(self, text):
        print(text)
        self.engine.say(text)
        self.engine.runAndWait()

    def listen(self):
        with sr.Microphone() as source:
            self.recognizer.adjust_for_ambient_noise(source)
            self.speak("Speak Now:")
            audio = self.recognizer.listen(source)
            try:
                text = self.recognizer.recognize_google(audio)
                return text
            except sr.UnknownValueError:
                self.speak("Sorry, could not recognize what you said")
                return ""
            except sr.RequestError as e:
                self.speak("Could not request results from Google Speech Recognition service.")
                return ""

    def send_email(self):
        def remove(string):
            return ''.join(e for e in string if e.isalnum())

        def sendmail():
            unm = "prettypraveenjpk@gmail.com"
            pwd = "vszk jbbw pqse szir"
            str = "Please provide Receiver's mail id"
            self.speak(str)

            id = self.listen().lower()
            id1 = remove(id)
            id2 = "@gmail.com"
            rec1 = id1 + id2
            rec = rec1

            print(rec)
            str = "Please speak the body of your email"
            self.speak(str)

            msg = self.listen()

            str = "You have spoken the message"
            self.speak(str)
            self.speak(msg)

            server = smtplib.SMTP_SSL("smtp.gmail.com", 465)
            server.login(unm, pwd)
            server.sendmail(unm, rec, msg)
            server.quit()

            str = "The email has been sent"
            self.speak(str)

        sendmail()

    def read_email(self):
        def readmail():
            server = e.connect("imap.gmail.com", self.unm, self.pwd)
            server.listids()

            print("Please say the Serial Number of the email")
            index = int(input())

            email = server.mail(server.listids()[index])

            print("The email is from:")
            print(email.from_addr)
            print("The subject of the email is:")
            print(email.title)
            print("The body of email is:")
            print(email.body)

        readmail()

    def start_reminder(self, instance):
        self.label.text = 'Reminder functionality activated'
        if self.vs:
            self.vs.stop()
        if self.fps:
            self.fps.stop()
        if self.reminder_thread:
            self.reminder_thread.cancel()
        if self.net:
            cv2.destroyAllWindows()
        self.vs = None
        self.fps = None
        self.reminder_thread = threading.Thread(target=self.run_reminder)
        self.reminder_thread.start()

    def run_reminder(self):
        r = sr.Recognizer()
        with sr.Microphone() as source:
            self.label.text = 'Listening...'
            audio = r.listen(source)

        try:
            text = r.recognize_google(audio)
            matches = re.search(r'remind me to (.+) at (\d+):(\d+)', text)
            if matches:
                message = matches.group(1)
                hour = int(matches.group(2))
                minute = int(matches.group(3))
                now = datetime.datetime.now()
                reminder_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
                if reminder_time < now:
                    reminder_time += datetime.timedelta(days=1)
                delay = (reminder_time - now).total_seconds()
                Clock.schedule_once(lambda dt: self.trigger_reminder(reminder_time, message), delay)
                self.label.text = f'Reminder set for {reminder_time.strftime("%I:%M %p")}'
            else:
                self.label.text = 'Invalid reminder command'
        except sr.UnknownValueError:
            self.label.text = 'Could not understand audio'
        except sr.RequestError as e:
            self.label.text = f'Speech recognition error: {e}'

    def trigger_reminder(self, reminder_time, message):
        reminder = VoiceReminder(message)
        reminder.trigger_reminder()

    def start_object_detection(self, instance):
        self.label.text = 'Object detection functionality activated'
        self.vs = VideoStream(src=0).start()
        time.sleep(2.0)
        self.fps = FPS().start()
        self.net = cv2.dnn.readNetFromCaffe('D:/object detection/MobileNetSSD_deploy.prototxt.txt',
                                            'D:/object detection/MobileNetSSD_deploy.caffemodel')
        Clock.schedule_interval(self.detect_objects, 0.01)

    def detect_objects(self, dt):
        frame = self.vs.read()
        frame = imutils.resize(frame, width=400)
        (h, w) = frame.shape[:2]
        blob = cv2.dnn.blobFromImage(cv2.resize(frame, (300, 300)), 0.007843, (300, 300), 127.5)
        self.net.setInput(blob)
        detections = self.net.forward()

        for i in np.arange(0, detections.shape[2]):
            confidence = detections[0, 0, i, 2]

            if confidence > 0.7:
                idx = int(detections[0, 0, i, 1])
                box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
                (startX, startY, endX, endY) = box.astype("int")
                label = "{}: {:.2f}%".format(self.CLASSES[idx], confidence * 100)
                cv2.rectangle(frame, (startX, startY), (endX, endY), self.COLORS[idx], 2)
                y = startY - 15 if startY - 15 > 15 else startY + 15
                cv2.putText(frame, label, (startX, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, self.COLORS[idx], 2)

                self.engine.say(f"I see a {self.CLASSES[idx]} with {confidence * 100:.2f}% confidence.")
                self.engine.runAndWait()

        cv2.imshow("Frame", frame)
        key = cv2.waitKey(1) & 0xFF

        if key == ord("x"):
            self.vs.stop()
            cv2.destroyAllWindows()
            self.stop()
            return False

    def on_stop(self):
        if self.vs:
            self.vs.stop()
        if self.fps:
            self.fps.stop()
        if self.reminder_thread:
            self.reminder_thread.cancel()
        if self.net:
            cv2.destroyAllWindows()


if _name_ == "_main_":
    VoiceEmailApp().run()